// This file is auto-generated by trix bindgen.

import {
    TRPClient,
    type ArgValue,
    type ClientOptions,
    type SubmitParams,
    type ResolveResponse,
} from "tx3-sdk/trp";


export const DEFAULT_TRP_ENDPOINT = "http://localhost:8164";

export const DEFAULT_HEADERS = {
};

export const DEFAULT_ENV_ARGS = {
};

export type MintCoinsParams = {
    admin: ArgValue;
    metadataValue: ArgValue;
    mintingScript: ArgValue;
    quantity: ArgValue;
    receiver: ArgValue;
}

export const MINT_COINS_IR = {
    bytecode: "0d030001036761730d02036761730d010561646d696e050e010d030c010000050200010000020d010561646d696e05000e0210010d02036761730d010561646d696e050e010d030c01000005020001000d030d0108726563656976657205000c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e746974790201050200010c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e74697479020000010e6e61746976655f7769746e65737301067363726970740d010e6d696e74696e675f7363726970740400000105000d010e6d657461646174615f76616c756504",
    encoding: "hex",
    version: "v1alpha8",
};

export type BurnCoinsParams = {
    admin: ArgValue;
    mintingScript: ArgValue;
    quantity: ArgValue;
}

export const BURN_COINS_IR = {
    bytecode: "0d030001036761730d02036761730d010561646d696e050e010d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e746974790200010000010d010561646d696e05000e020e0210010d02036761730d010561646d696e050e010d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e74697479020001000d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e74697479020105020000010c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e746974790200010e6e61746976655f7769746e65737301067363726970740d010e6d696e74696e675f73637269707404000000",
    encoding: "hex",
    version: "v1alpha8",
};

export type SendCoinsParams = {
    quantity: ArgValue;
    reason: ArgValue;
    receiver: ArgValue;
    sender: ArgValue;
    userScript: ArgValue;
    userSignature: ArgValue;
}

export const SEND_COINS_IR = {
    bytecode: "0d030001036761730d02036761730d010673656e646572050e010d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e746974790200010000020d0108726563656976657205000c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e74697479020d010673656e64657205000e020e0210010d02036761730d010673656e646572050e010d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e74697479020001000d030c01041c954fe5769e9eb8dad54c99f8d62015c813c24f229a4d98dbf05c28b90704434f494e0d01087175616e7469747902000000010e6e61746976655f7769746e65737301067363726970740d010b757365725f7363726970740400000205000d0106726561736f6e0405020d010e757365725f7369676e617475726504",
    encoding: "hex",
    version: "v1alpha8",
};

export type SendAllParams = {
    sender: ArgValue;
}

export const SEND_ALL_IR = {
    bytecode: "0d030001036761730d02036761730d010673656e646572050d03000100000000000000000000",
    encoding: "hex",
    version: "v1alpha8",
};

export class Client {
    readonly #client: TRPClient;

    constructor(options: ClientOptions) {
        this.#client = new TRPClient(options);
    }

    async mintCoinsTx(args: MintCoinsParams): Promise<ResolveResponse> {
        return await this.#client.resolve({
            tir: MINT_COINS_IR,
            args,
        });
    }
    async burnCoinsTx(args: BurnCoinsParams): Promise<ResolveResponse> {
        return await this.#client.resolve({
            tir: BURN_COINS_IR,
            args,
        });
    }
    async sendCoinsTx(args: SendCoinsParams): Promise<ResolveResponse> {
        return await this.#client.resolve({
            tir: SEND_COINS_IR,
            args,
        });
    }
    async sendAllTx(args: SendAllParams): Promise<ResolveResponse> {
        return await this.#client.resolve({
            tir: SEND_ALL_IR,
            args,
        });
    }


    async submit(params: SubmitParams): Promise<void> {
        await this.#client.submit(params);
    }
}

// Create a default client instance
export const protocol = new Client({
    endpoint: DEFAULT_TRP_ENDPOINT,
    headers: DEFAULT_HEADERS,
    envArgs: DEFAULT_ENV_ARGS,
});
